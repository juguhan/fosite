// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/fosite (interfaces: DeviceAuthorizeEndpointHandler,RFC8623UserAuthorizeEndpointHandler)

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	fosite "github.com/ory/fosite"
)

// MockDeviceAuthorizeEndpointHandler is a mock of DeviceAuthorizeEndpointHandler interface.
type MockDeviceAuthorizeEndpointHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceAuthorizeEndpointHandlerMockRecorder
}

// MockDeviceAuthorizeEndpointHandlerMockRecorder is the mock recorder for MockDeviceAuthorizeEndpointHandler.
type MockDeviceAuthorizeEndpointHandlerMockRecorder struct {
	mock *MockDeviceAuthorizeEndpointHandler
}

// NewMockDeviceAuthorizeEndpointHandler creates a new mock instance.
func NewMockDeviceAuthorizeEndpointHandler(ctrl *gomock.Controller) *MockDeviceAuthorizeEndpointHandler {
	mock := &MockDeviceAuthorizeEndpointHandler{ctrl: ctrl}
	mock.recorder = &MockDeviceAuthorizeEndpointHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceAuthorizeEndpointHandler) EXPECT() *MockDeviceAuthorizeEndpointHandlerMockRecorder {
	return m.recorder
}

// HandleDeviceAuthorizeEndpointRequest mocks base method.
func (m *MockDeviceAuthorizeEndpointHandler) HandleDeviceAuthorizeEndpointRequest(arg0 context.Context, arg1 fosite.DeviceAuthorizeRequester, arg2 fosite.DeviceAuthorizeResponder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDeviceAuthorizeEndpointRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDeviceAuthorizeEndpointRequest indicates an expected call of HandleDeviceAuthorizeEndpointRequest.
func (mr *MockDeviceAuthorizeEndpointHandlerMockRecorder) HandleDeviceAuthorizeEndpointRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDeviceAuthorizeEndpointRequest", reflect.TypeOf((*MockDeviceAuthorizeEndpointHandler)(nil).HandleDeviceAuthorizeEndpointRequest), arg0, arg1, arg2)
}

// MockRFC8623UserAuthorizeEndpointHandler is a mock of RFC8623UserAuthorizeEndpointHandler interface.
type MockRFC8623UserAuthorizeEndpointHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRFC8623UserAuthorizeEndpointHandlerMockRecorder
}

// MockRFC8623UserAuthorizeEndpointHandlerMockRecorder is the mock recorder for MockRFC8623UserAuthorizeEndpointHandler.
type MockRFC8623UserAuthorizeEndpointHandlerMockRecorder struct {
	mock *MockRFC8623UserAuthorizeEndpointHandler
}

// NewMockRFC8623UserAuthorizeEndpointHandler creates a new mock instance.
func NewMockRFC8623UserAuthorizeEndpointHandler(ctrl *gomock.Controller) *MockRFC8623UserAuthorizeEndpointHandler {
	mock := &MockRFC8623UserAuthorizeEndpointHandler{ctrl: ctrl}
	mock.recorder = &MockRFC8623UserAuthorizeEndpointHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRFC8623UserAuthorizeEndpointHandler) EXPECT() *MockRFC8623UserAuthorizeEndpointHandlerMockRecorder {
	return m.recorder
}

// PopulateRFC8623UserAuthorizeEndpointResponse mocks base method.
func (m *MockRFC8623UserAuthorizeEndpointHandler) PopulateRFC8623UserAuthorizeEndpointResponse(arg0 context.Context, arg1 fosite.DeviceAuthorizeRequester, arg2 fosite.RFC8623UserAuthorizeResponder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopulateRFC8623UserAuthorizeEndpointResponse", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PopulateRFC8623UserAuthorizeEndpointResponse indicates an expected call of PopulateRFC8623UserAuthorizeEndpointResponse.
func (mr *MockRFC8623UserAuthorizeEndpointHandlerMockRecorder) PopulateRFC8623UserAuthorizeEndpointResponse(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateRFC8623UserAuthorizeEndpointResponse", reflect.TypeOf((*MockRFC8623UserAuthorizeEndpointHandler)(nil).PopulateRFC8623UserAuthorizeEndpointResponse), arg0, arg1, arg2)
}

// HandleRFC8623UserAuthorizeEndpointRequest mocks base method.
func (m *MockRFC8623UserAuthorizeEndpointHandler) HandleRFC8623UserAuthorizeEndpointRequest(arg0 context.Context, arg1 fosite.DeviceAuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRFC8623UserAuthorizeEndpointRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRFC8623UserAuthorizeEndpointRequest indicates an expected call of HandleRFC8623UserAuthorizeEndpointRequest.
func (mr *MockRFC8623UserAuthorizeEndpointHandlerMockRecorder) HandleRFC8623UserAuthorizeEndpointRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRFC8623UserAuthorizeEndpointRequest", reflect.TypeOf((*MockRFC8623UserAuthorizeEndpointHandler)(nil).HandleRFC8623UserAuthorizeEndpointRequest), arg0, arg1)
}
