// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/fosite (interfaces: DeviceAuthorizationEndpointHandler,DeviceUserVerificationEndpointHandler)

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	fosite "github.com/ory/fosite"
)

// MockDeviceAuthorizationEndpointHandler is a mock of DeviceAuthorizationEndpointHandler interface.
type MockDeviceAuthorizationEndpointHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceAuthorizationEndpointHandlerMockRecorder
}

// MockDeviceAuthorizationEndpointHandlerMockRecorder is the mock recorder for MockDeviceAuthorizationEndpointHandler.
type MockDeviceAuthorizationEndpointHandlerMockRecorder struct {
	mock *MockDeviceAuthorizationEndpointHandler
}

// NewMockDeviceAuthorizationEndpointHandler creates a new mock instance.
func NewMockDeviceAuthorizationEndpointHandler(ctrl *gomock.Controller) *MockDeviceAuthorizationEndpointHandler {
	mock := &MockDeviceAuthorizationEndpointHandler{ctrl: ctrl}
	mock.recorder = &MockDeviceAuthorizationEndpointHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceAuthorizationEndpointHandler) EXPECT() *MockDeviceAuthorizationEndpointHandlerMockRecorder {
	return m.recorder
}

// HandleDeviceAuthorizationEndpointRequest mocks base method.
func (m *MockDeviceAuthorizationEndpointHandler) HandleDeviceAuthorizationEndpointRequest(arg0 context.Context, arg1 fosite.DeviceAuthorizationRequester, arg2 fosite.DeviceResponder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDeviceAuthorizationEndpointRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDeviceAuthorizationEndpointRequest indicates an expected call of HandleDeviceAuthorizationEndpointRequest.
func (mr *MockDeviceAuthorizationEndpointHandlerMockRecorder) HandleDeviceAuthorizationEndpointRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDeviceAuthorizationEndpointRequest", reflect.TypeOf((*MockDeviceAuthorizationEndpointHandler)(nil).HandleDeviceAuthorizationEndpointRequest), arg0, arg1, arg2)
}

// MockDeviceUserVerificationEndpointHandler is a mock of DeviceUserVerificationEndpointHandler interface.
type MockDeviceUserVerificationEndpointHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceUserVerificationEndpointHandlerMockRecorder
}

// MockDeviceUserVerificationEndpointHandlerMockRecorder is the mock recorder for MockDeviceUserVerificationEndpointHandler.
type MockDeviceUserVerificationEndpointHandlerMockRecorder struct {
	mock *MockDeviceUserVerificationEndpointHandler
}

// NewMockDeviceUserVerificationEndpointHandler creates a new mock instance.
func NewMockDeviceUserVerificationEndpointHandler(ctrl *gomock.Controller) *MockDeviceUserVerificationEndpointHandler {
	mock := &MockDeviceUserVerificationEndpointHandler{ctrl: ctrl}
	mock.recorder = &MockDeviceUserVerificationEndpointHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceUserVerificationEndpointHandler) EXPECT() *MockDeviceUserVerificationEndpointHandlerMockRecorder {
	return m.recorder
}

// HandleDeviceUserVerificationEndpointRequest mocks base method.
func (m *MockDeviceUserVerificationEndpointHandler) HandleDeviceUserVerificationEndpointRequest(arg0 context.Context, arg1 fosite.DeviceAuthorizationRequester, arg2 fosite.DeviceUserVerificationResponder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDeviceUserVerificationEndpointRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDeviceUserVerificationEndpointRequest indicates an expected call of HandleDeviceUserVerificationEndpointRequest.
func (mr *MockDeviceUserVerificationEndpointHandlerMockRecorder) HandleDeviceUserVerificationEndpointRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDeviceUserVerificationEndpointRequest", reflect.TypeOf((*MockDeviceUserVerificationEndpointHandler)(nil).HandleDeviceUserVerificationEndpointRequest), arg0, arg1, arg2)
}

// ValidateRequest mocks base method.
func (m *MockDeviceUserVerificationEndpointHandler) ValidateRequest(arg0 context.Context, arg1 fosite.DeviceAuthorizationRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRequest indicates an expected call of ValidateRequest.
func (mr *MockDeviceUserVerificationEndpointHandlerMockRecorder) ValidateRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRequest", reflect.TypeOf((*MockDeviceUserVerificationEndpointHandler)(nil).ValidateRequest), arg0, arg1)
}
