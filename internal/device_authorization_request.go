// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/fosite (interfaces: DeviceAuthorizationRequester)

// Package internal is a generated GoMock package.
package internal

import (
	url "net/url"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	fosite "github.com/ory/fosite"
)

// MockDeviceAuthorizationRequester is a mock of DeviceAuthorizationRequester interface.
type MockDeviceAuthorizationRequester struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceAuthorizationRequesterMockRecorder
}

// MockDeviceAuthorizationRequesterMockRecorder is the mock recorder for MockDeviceAuthorizationRequester.
type MockDeviceAuthorizationRequesterMockRecorder struct {
	mock *MockDeviceAuthorizationRequester
}

// NewMockDeviceAuthorizationRequester creates a new mock instance.
func NewMockDeviceAuthorizationRequester(ctrl *gomock.Controller) *MockDeviceAuthorizationRequester {
	mock := &MockDeviceAuthorizationRequester{ctrl: ctrl}
	mock.recorder = &MockDeviceAuthorizationRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceAuthorizationRequester) EXPECT() *MockDeviceAuthorizationRequesterMockRecorder {
	return m.recorder
}

// AppendRequestedScope mocks base method.
func (m *MockDeviceAuthorizationRequester) AppendRequestedScope(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendRequestedScope", arg0)
}

// AppendRequestedScope indicates an expected call of AppendRequestedScope.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) AppendRequestedScope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendRequestedScope", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).AppendRequestedScope), arg0)
}

// GetClient mocks base method.
func (m *MockDeviceAuthorizationRequester) GetClient() fosite.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(fosite.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).GetClient))
}

// GetDeviceCodeSignature mocks base method.
func (m *MockDeviceAuthorizationRequester) GetDeviceCodeSignature() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceCodeSignature")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeviceCodeSignature indicates an expected call of GetDeviceCodeSignature.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) GetDeviceCodeSignature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceCodeSignature", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).GetDeviceCodeSignature))
}

// GetGrantedAudience mocks base method.
func (m *MockDeviceAuthorizationRequester) GetGrantedAudience() fosite.Arguments {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrantedAudience")
	ret0, _ := ret[0].(fosite.Arguments)
	return ret0
}

// GetGrantedAudience indicates an expected call of GetGrantedAudience.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) GetGrantedAudience() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrantedAudience", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).GetGrantedAudience))
}

// GetGrantedScopes mocks base method.
func (m *MockDeviceAuthorizationRequester) GetGrantedScopes() fosite.Arguments {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrantedScopes")
	ret0, _ := ret[0].(fosite.Arguments)
	return ret0
}

// GetGrantedScopes indicates an expected call of GetGrantedScopes.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) GetGrantedScopes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrantedScopes", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).GetGrantedScopes))
}

// GetID mocks base method.
func (m *MockDeviceAuthorizationRequester) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).GetID))
}

// GetLastChecked mocks base method.
func (m *MockDeviceAuthorizationRequester) GetLastChecked() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastChecked")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetLastChecked indicates an expected call of GetLastChecked.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) GetLastChecked() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastChecked", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).GetLastChecked))
}

// GetRequestForm mocks base method.
func (m *MockDeviceAuthorizationRequester) GetRequestForm() url.Values {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestForm")
	ret0, _ := ret[0].(url.Values)
	return ret0
}

// GetRequestForm indicates an expected call of GetRequestForm.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) GetRequestForm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestForm", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).GetRequestForm))
}

// GetRequestedAt mocks base method.
func (m *MockDeviceAuthorizationRequester) GetRequestedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetRequestedAt indicates an expected call of GetRequestedAt.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) GetRequestedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestedAt", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).GetRequestedAt))
}

// GetRequestedAudience mocks base method.
func (m *MockDeviceAuthorizationRequester) GetRequestedAudience() fosite.Arguments {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestedAudience")
	ret0, _ := ret[0].(fosite.Arguments)
	return ret0
}

// GetRequestedAudience indicates an expected call of GetRequestedAudience.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) GetRequestedAudience() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestedAudience", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).GetRequestedAudience))
}

// GetRequestedScopes mocks base method.
func (m *MockDeviceAuthorizationRequester) GetRequestedScopes() fosite.Arguments {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestedScopes")
	ret0, _ := ret[0].(fosite.Arguments)
	return ret0
}

// GetRequestedScopes indicates an expected call of GetRequestedScopes.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) GetRequestedScopes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestedScopes", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).GetRequestedScopes))
}

// GetSession mocks base method.
func (m *MockDeviceAuthorizationRequester) GetSession() fosite.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession")
	ret0, _ := ret[0].(fosite.Session)
	return ret0
}

// GetSession indicates an expected call of GetSession.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) GetSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).GetSession))
}

// GetStatus mocks base method.
func (m *MockDeviceAuthorizationRequester) GetStatus() fosite.DeviceAuthorizationStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(fosite.DeviceAuthorizationStatus)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).GetStatus))
}

// GetUserCodeSignature mocks base method.
func (m *MockDeviceAuthorizationRequester) GetUserCodeSignature() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCodeSignature")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserCodeSignature indicates an expected call of GetUserCodeSignature.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) GetUserCodeSignature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCodeSignature", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).GetUserCodeSignature))
}

// GrantAudience mocks base method.
func (m *MockDeviceAuthorizationRequester) GrantAudience(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GrantAudience", arg0)
}

// GrantAudience indicates an expected call of GrantAudience.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) GrantAudience(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAudience", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).GrantAudience), arg0)
}

// GrantScope mocks base method.
func (m *MockDeviceAuthorizationRequester) GrantScope(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GrantScope", arg0)
}

// GrantScope indicates an expected call of GrantScope.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) GrantScope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantScope", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).GrantScope), arg0)
}

// Merge mocks base method.
func (m *MockDeviceAuthorizationRequester) Merge(arg0 fosite.Requester) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Merge", arg0)
}

// Merge indicates an expected call of Merge.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) Merge(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).Merge), arg0)
}

// Sanitize mocks base method.
func (m *MockDeviceAuthorizationRequester) Sanitize(arg0 []string) fosite.Requester {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sanitize", arg0)
	ret0, _ := ret[0].(fosite.Requester)
	return ret0
}

// Sanitize indicates an expected call of Sanitize.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) Sanitize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sanitize", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).Sanitize), arg0)
}

// SetDeviceCodeSignature mocks base method.
func (m *MockDeviceAuthorizationRequester) SetDeviceCodeSignature(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeviceCodeSignature", arg0)
}

// SetDeviceCodeSignature indicates an expected call of SetDeviceCodeSignature.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) SetDeviceCodeSignature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeviceCodeSignature", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).SetDeviceCodeSignature), arg0)
}

// SetID mocks base method.
func (m *MockDeviceAuthorizationRequester) SetID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetID", arg0)
}

// SetID indicates an expected call of SetID.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) SetID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).SetID), arg0)
}

// SetLastChecked mocks base method.
func (m *MockDeviceAuthorizationRequester) SetLastChecked(arg0 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLastChecked", arg0)
}

// SetLastChecked indicates an expected call of SetLastChecked.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) SetLastChecked(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastChecked", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).SetLastChecked), arg0)
}

// SetRequestedAudience mocks base method.
func (m *MockDeviceAuthorizationRequester) SetRequestedAudience(arg0 fosite.Arguments) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRequestedAudience", arg0)
}

// SetRequestedAudience indicates an expected call of SetRequestedAudience.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) SetRequestedAudience(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRequestedAudience", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).SetRequestedAudience), arg0)
}

// SetRequestedScopes mocks base method.
func (m *MockDeviceAuthorizationRequester) SetRequestedScopes(arg0 fosite.Arguments) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRequestedScopes", arg0)
}

// SetRequestedScopes indicates an expected call of SetRequestedScopes.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) SetRequestedScopes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRequestedScopes", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).SetRequestedScopes), arg0)
}

// SetSession mocks base method.
func (m *MockDeviceAuthorizationRequester) SetSession(arg0 fosite.Session) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSession", arg0)
}

// SetSession indicates an expected call of SetSession.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) SetSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSession", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).SetSession), arg0)
}

// SetStatus mocks base method.
func (m *MockDeviceAuthorizationRequester) SetStatus(arg0 fosite.DeviceAuthorizationStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", arg0)
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) SetStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).SetStatus), arg0)
}

// SetUserCodeSignature mocks base method.
func (m *MockDeviceAuthorizationRequester) SetUserCodeSignature(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserCodeSignature", arg0)
}

// SetUserCodeSignature indicates an expected call of SetUserCodeSignature.
func (mr *MockDeviceAuthorizationRequesterMockRecorder) SetUserCodeSignature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserCodeSignature", reflect.TypeOf((*MockDeviceAuthorizationRequester)(nil).SetUserCodeSignature), arg0)
}
